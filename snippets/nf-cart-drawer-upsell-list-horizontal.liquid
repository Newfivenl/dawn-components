{% if settings.cart_type == 'drawer' and cart_upsells_product_handles != blank %}
    {% unless settings.cart_upsells_title == blank %}
        <h4 class="" id="nf-cart-drawer-upsells-title">
            {{ settings.cart_upsells_title }}
        </h4>
    {% endunless %}
    <ul id="nf-cart-drawer-upsell-list-horizontal" class="nf-cart-drawer-upsell-list-horizontal">
        {% assign product_handles_array = cart_upsells_product_handles | split: ',' %}
        {% for handle in product_handles_array %}
            {% assign product = all_products[handle] %}
            <li class="nf-cart-drawer-upsell-list-horizontal-item"></li>
        {% endfor %}
    </ul>
{% else %}
    {% unless settings.cart_upsells_title == blank %}
        <h4 class="" id="nf-cart-drawer-upsells-title">
            {{ settings.cart_upsells_title }}
        </h4>
        <ul id="nf-cart-drawer-upsell-list-horizontal" class="nf-cart-recommendations-list-horizontal">
            <li class="nf-flex nf-items-center nf-justify-center">
                <div class="loading-overlay__spinner" style="width: 3rem;">
                    <svg aria-hidden="true" focusable="false" role="presentation" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                        <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                    </svg>
                </div>
            </li>
        </ul>  
    {% endunless %}
{% endif %}

<style>
#nf-cart-drawer-upsell-list-horizontal {
    display: flex;
    align-items: flex-start;
    justify-content: flex-start;
    overflow-x: auto;
    overflow-y: hidden;
    height: 320px;
    padding: 0px;
}

#nf-cart-drawer-upsells-title {
    font-weight: bold;
}

#nf-cart-drawer-upsell-list-horizontal::-webkit-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none; 
    width: 3px;
    height: 5px;
    display: block;
    transition: ease 0.3s;
}

#nf-cart-drawer-upsell-list-horizontal:hover::-webkit-scrollbar-track{
-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
background-color: #F5F5F5;
transition: ease 0.3s;

}
#nf-cart-drawer-upsell-list-horizontal:hover::-webkit-scrollbar{
background-color: #F5F5F5;
transition: ease 0.3s;
}
#nf-cart-drawer-upsell-list-horizontal:hover::-webkit-scrollbar-thumb{
background-color: #414141;
transition: ease 0.3s;
}

#nf-cart-drawer-upsell-list-horizontal .nf-cart-drawer-upsell-list-horizontal-item {
    list-style-type: none;
    background-color: #f8f6f2;
    width: 150px;
    margin: 0px 5px;
    padding: 10px;
}

#nf-cart-drawer-upsell-list-horizontal .nf-cart-drawer-upsell-list-horizontal-item .nf-cart-drawer-upsell-data .nf-justify-between{
    display: flex;
    flex-direction: column;
}

#nf-cart-drawer-upsell-list-horizontal .nf-cart-drawer-upsell-list-horizontal-item .nf-cart-drawer-upsell-data a{
    margin-bottom: 10px;
}

.upsell_variant_select {
    width: 133px;
    padding: 7px;
    border: 2px solid #000;
    font-weight: bold;
    background: transparent;
}

.upsell_variant_select:focus {
    border: none;
    outline: none;
}

.cart_upsell_button--recommendation  {
    display: block;
    padding: 5px 10px;
    border: 2px solid #000;
    text-align: center;
    cursor: pointer;
    font-size: 11px;
    font-weight: bold;
}

.cart_upsell_button--recommendation:hover, .upsell_variant_select:hover {
    background-color: #000;
    color: #fff;
    transition: ease 0.3s;
}

/* Cart Goal */
#nf-cart-drawer-goal {
    background-color: #FAFAFA;
    border-bottom: 1px solid #f2f2f2;
}
#nf-cart-drawer-goal p {                          
    margin-top: 0 !important;
}


.cart-items thead {
    padding-top: 1.8rem;
}

.drawer__body {
    overflow-y: auto;
    overflow-x: hidden;
}

cart-drawer-items {
    overflow: initial !important;
}

.drawer__footer {
    position: sticky;
    bottom: 0px;
    left: 0px;
}

</style>

<script>  
    window.addEventListener('DOMContentLoaded', (event) => {

      //Load cart drawer on ajax add/update        
      window.loadNfCartDrawer = async () => {
        const $cartDrawer = document.querySelector('#CartDrawer')
        const $offCanvasFade = document.querySelector('.offcanvas-backdrop')
        if (!$cartDrawer) return;      
        $cartDrawer.classList.add('show')
        $offCanvasFade.classList.add('show')
        $cartDrawer.setAttribute('role', 'dialog')
        $cartDrawer.style.visibility = 'visible'
        const $form = $cartDrawer.querySelector('form')
        $form.style.opacity = '.2'
        $form.style.pointerEvents = 'none'
        $cartDrawer.children[1].classList.remove('hidden')
        const respoonse = await fetch(window.location.href)
        const data = await respoonse.text()
        const parser = new DOMParser()
        const newDocument = parser.parseFromString(data, 'text/html')
        $form.replaceWith(newDocument.querySelector('#cart-drawer form'))
        document.querySelector('#cart-icon-bubble .cart-count-bubble')
            ?.replaceWith(newDocument.querySelector('#cart-icon-bubble .cart-count-bubble'))          
        setTimeout(() => {        
          document.querySelectorAll('.cart_upsell_checkbox').forEach((btn) => {
            btn.classList.remove('added')
            btn.closest('.nf-cart-drawer-upsell-list-horizontal-item').classList.remove('added')
          })
        }, 1000)
        $cartDrawer.children[1].classList.add('hidden')
        initCartDrawerQuantity()
        initCartDrawerRemoveButtons()
        initCartGoal()
        initCartUpsells()
        initCartNote()
        initCartOpenClose()
        initCartRecommendations()
        initCartEmpty()
      }
      //recommendations product display if no upsells
      const initCartRecommendations = () => {        
        const cartItems = [{{ cart_items }}]
        // let is_in_cart = false
        // let is_added = ''      
        let $cartItemId = document.querySelectorAll('.cart-item')[0]
        const recommList = document.querySelector('.nf-cart-recommendations-list-horizontal')
        if(!$cartItemId) return
        if(!recommList) return
        const recommendedProducts = '/recommendations/products.json?product_id='+$cartItemId.dataset.item+'&limit=3'
        let upsell_tag_text = '{{ section.settings.cart_upsell_tag }}'
        let recommListItem = ''
        fetch(recommendedProducts)
        .then(res => res.json())
        .then(data => {
            console.log(data)
          let recomm_upsells_list = new Array()
          for(let i in data.products) {
            console.log('Recomm items:'+data.products[i].id)
            // if(is_in_cart) is_added = 'added'
            // console.log(is_added)

            let variant_available_only = []
            for(let variant_available in data.products[i].variants) {
              if( data.products[i].variants[variant_available].available == true ) {
                variant_available_only.push(data.products[i].variants[variant_available])
              }
            }

            recommListItem += '<li class="nf-cart-drawer-upsell-list-horizontal-item">'            
            recommListItem += '<a href="'+ data.products[i].url +'" class="cart_upsell_image_wrapper"><img src="'+data.products[i].featured_image+'" alt="'+data.products[i].title+'" width="160" height="160" style="width: 130px;height:130px;"></a>'
            recommListItem += '<div class="nf-cart-drawer-upsell-data">'
            recommListItem += '<a class="cart-item__name h5" href="'+ data.products[i].url +'">'+ data.products[i].title +'</a>'
            
            if( upsell_tag_text !== '' ) {
              recommListItem += '<p class="nf-text-[10px] nf-text-[#444444] nf-leading-normal nf-m-0 nf-my-[10px]">'+ upsell_tag_text.replace('[amount]', '€' + priceFormat(data.products[i].price)) +'</p>'
            }

            if(variant_available_only.length > 1) {

              recommListItem += '<div class="">'
              recommListItem += '<div class="">'  
              recommListItem += '<select name="id" class="upsell_variant_select">'
              recommListItem += '<option  selected disabled> Select - €'+priceFormat(data.products[i].price)+'</option>'
              for(let j in data.products[i].variants) {
                if( data.products[i].variants[j].available == true ) {
                  recommListItem += '<option  value="'+ data.products[i].variants[j].id +'">'+ data.products[i].variants[j].title + ' - €'+ priceFormat( data.products[i].variants[j].price ) +'</option>'
                }
              }
              recommListItem += '</select>'
              recommListItem += '</div>'
            }else {
              recommListItem += '<span class="cart_upsell_button--recommendation " data-variant-id="'+variant_available_only[0].id+'">ADD - € '+priceFormat(data.products[i].price)+' </span>'
            }
            
            recommListItem += '</div>'
            recommListItem += '</div>'
            recommListItem += '</li>'
          }
          recommList.innerHTML = recommListItem
          recommendationsUpsell()
          recommendationsUpsellSelect()
        })
      }
      initCartRecommendations()
      //Open/close event cart drawer
      const initCartOpenClose = () => {  
        const $cartDrawer = document.querySelector('#cart-drawer')
        const $offCanvasFade = document.querySelector('.offcanvas-backdrop')
        const $closeBtn = document.querySelector('#cart-drawer .btn-close')
        const $cartIcon = document.querySelector('#cart-icon-bubble')
  
        if(!$cartDrawer) return
        if(!$closeBtn) return
  
        $cartIcon.addEventListener('click', async (e) => {
          e.preventDefault()
          $cartDrawer.classList.add('show')
          $offCanvasFade.classList.add('show')
          $cartDrawer.setAttribute('role', 'dialog')
          $cartDrawer.style.visibility = 'visible'          
  
          setTimeout(() => {        
            document.querySelectorAll('.cart_upsell_checkbox').forEach((btn) => {
              btn.classList.remove('added')
              btn.closest('.nf-cart-drawer-upsell-list-horizontal-item').classList.remove('added')
            })
          }, 1000)
        })
        
        $closeBtn.addEventListener('click', async (e) => {
          $cartDrawer.classList.remove('show')
          $offCanvasFade.classList.remove('show')
          $cartDrawer.removeAttribute('role')
          $cartDrawer.style.visibility = 'hidden'
        })
  
        $offCanvasFade.addEventListener('click', async (e) =>{
          $cartDrawer.classList.remove('show')
          $offCanvasFade.classList.remove('show')
          $cartDrawer.removeAttribute('role')
          $cartDrawer.style.visibility = 'hidden'        
        })
      }
      initCartOpenClose()
      //Handle quantity
      const initCartDrawerQuantity = () => {
        document.querySelectorAll('#cart-drawer quantity-input .quantity__input').forEach(($input) => {
          $input.addEventListener('change', async (e) => {
            await fetch('/cart/change.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                line: $input.dataset.index,
                quantity: Number($input.value)
              })
            })
            loadNfCartDrawer()
          })
        })
      }
      initCartDrawerQuantity()
      //Handle remove buttons
      const initCartDrawerRemoveButtons = () => {
        document.querySelectorAll('cart-remove-button a').forEach(($btn) => {
          $btn.addEventListener('click', async (e) => {
            e.preventDefault();
            await fetch('/cart/change.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                line: $btn.parentElement.dataset.index,
                quantity: 0
              })
            })
            loadNfCartDrawer()
          })
        })
      }
      initCartDrawerRemoveButtons()
      //Cart goal - animate width
      const initCartGoal = () => {
        const progressBar = document.querySelector('#nf-cart-drawer-goal .progress-bar')
        if( progressBar ) {
          setTimeout(() => {
            progressBar.style.width = progressBar.dataset.width
          }, 250)
        }
      }
      initCartGoal()
      //Cart upsells
      const initCartUpsells = async () => { 
        document.querySelectorAll('.cart_upsell_checkbox').forEach((btn) => {
          btn.addEventListener('click', async (e) => {
            e.preventDefault()
            // console.log('Upsell Clicked!')
            btn.classList.add('added')
            btn.parentElement.classList.add('added')
            const variantId = btn.closest('.nf-cart-drawer-upsell-list-horizontal-item').querySelector('select[name="id"]').value
            const variantQuantity = 1;
            const response = await fetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                items: [{
                  id: Number(variantId),
                  quantity: Number(variantQuantity)
                }]
              })
            })
            const data = await response.json()
            // console.log(data)
            loadNfCartDrawer()
          })
        })
      }
      //initCartUpsells()
      //Cart note
      const initCartNote = async () => {
        document.querySelectorAll('#nf-cart-drawer-note button').forEach((btn) => {
          btn.addEventListener('click', async (e) => {
            e.preventDefault()
            btn.querySelector('span').classList.add('hidden')
            btn.querySelector('.loading-overlay__spinner').classList.remove('hidden')
            const note = document.querySelector('#nf-cart-drawer-note textarea').value
            const response = await fetch('/cart/update.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                note: note
              })
            })
            const data = await response.json()
            // console.log(data)
            btn.querySelector('span').classList.remove('hidden')
            btn.querySelector('span').textContent = "✓"
            btn.querySelector('.loading-overlay__spinner').classList.add('hidden')
            setTimeout(() => {
              btn.querySelector('span').textContent = btn.dataset.text
              document.querySelector('#nf-cart-drawer-note textarea').value = ''
            }, 2000)
          })
        })
      }
      initCartNote()    
      //Recommendations upsell button
      const recommendationsUpsell = async () => {
        document.querySelectorAll('.cart_upsell_button--recommendation').forEach((check) => {
          check.addEventListener('click', async (e) => {
            check.classList.add('added')
            check.parentElement.classList.add('added')
            const variantId = check.getAttribute('data-variant-id')
            const variantQuantity = 1;
            const response = await fetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                items: [{
                  id: Number(variantId),
                  quantity: Number(variantQuantity)
                }]
              })
            })
            const data = await response.json()
            loadNfCartDrawer()
          })
        })
      }
      recommendationsUpsell()
      //Recommendations upsell select
      const recommendationsUpsellSelect = async () => {
        document.querySelectorAll('.upsell_variant_select').forEach((select) => {
          select.addEventListener('change', async (e) => {
            const variantId = select.value;
            const variantQuantity = 1;
            const response = await fetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                items: [{
                  id: Number(variantId),
                  quantity: Number(variantQuantity)
                }]
              })
            })
            const data = await response.json()
            loadNfCartDrawer()
          });
        })
      }
      recommendationsUpsellSelect();
      //Empty cart
      const initCartEmpty = async () => {
        const $cartEmptyBtn = document.querySelector('.cart__empty--button')
        if(!$cartEmptyBtn) return
        $cartEmptyBtn.addEventListener('click', async (e) => {
          const response = await fetch('/cart/clear.js')
          const data = await response.json()
          // console.log(data)
          loadNfCartDrawer()
        })
      }
      initCartEmpty()
        function priceFormat(price) {
            return ( price / 100 ).toFixed(2).replace('.', ',');
        }
    });
</script>