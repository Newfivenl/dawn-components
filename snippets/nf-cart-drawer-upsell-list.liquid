<link rel="stylesheet" href="{{ 'nf-cart-drawer-upsell-list.css' | asset_url }}" media="print" onload="this.media='all'">
{% if settings.cart_type == 'drawer' and cart_upsells_product_handles != blank %}
    {% unless settings.cart_upsells_title == blank %}
        <h4 class="" id="nf-cart-drawer-upsells-title">
            {{ settings.cart_upsells_title }}
        </h4>
    {% endunless %}
    <ul id="nf-cart-drawer-upsell-list" class="nf-cart-drawer-upsell-list">
        {% assign product_handles_array = cart_upsells_product_handles | split: ',' %}
        {% for handle in product_handles_array %}
            {% assign product = all_products[handle] %}
            <li class="nf-cart-drawer-upsell-list-item"></li>
        {% endfor %}
    </ul>
{% else %}
    {% if settings.cart_upsells_title != blank and settings.upsell_enable == true %}
      {%- if cart != empty -%}
        <h4 class="" id="nf-cart-drawer-upsells-title">
            {{ settings.cart_upsells_title }}
        </h4>
        <ul id="nf-cart-drawer-upsell-list" class="nf-cart-recommendations-list">
            <li class="nf-flex nf-items-center nf-justify-center">
                <div class="loading-overlay__spinner" style="width: 3rem;">
                    <svg aria-hidden="true" focusable="false" role="presentation" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                        <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                    </svg>
                </div>
            </li>
        </ul>
      {% endif %}  
    {% endif %}
{% endif %}

<script>  
    window.addEventListener('DOMContentLoaded', (event) => {
      //Load cart drawer on ajax add/update        
      window.loadNfCartDrawer = async () => {
        const $cartDrawer = document.querySelector('#CartDrawer')
        if (!$cartDrawer) return;
        $cartDrawer.setAttribute('role', 'dialog')
        $cartDrawer.style.visibility = 'visible'
        const $form = $cartDrawer.querySelector('form')
        $form.style.opacity = '.2'
        $form.style.pointerEvents = 'none'
        $cartDrawer.children[1].classList.remove('hidden')
        const respoonse = await fetch(window.location.href)
        const data = await respoonse.text()
        const parser = new DOMParser()
        const newDocument = parser.parseFromString(data, 'text/html')
        //console.log("new form")
        //console.log(newDocument.querySelector('#CartDrawer form'))
        // Heres the problem
        $form.replaceWith(newDocument.querySelector('#CartDrawer form'))
        
        //Somehow fix?
        // document.querySelector('#CartDrawer-Form')
        // ?.replaceWith(newDocument.querySelector('#CartDrawer-Form'))

        document.querySelector('#cart-icon-bubble .cart-count-bubble')
            ?.replaceWith(newDocument.querySelector('#cart-icon-bubble .cart-count-bubble'))          
        
        // setTimeout(() => {        
        //   document.querySelectorAll('.cart_upsell_checkbox').forEach((btn) => {
        //     btn.classList.remove('added')
        //     btn.closest('.nf-cart-drawer-upsell-list-item').classList.remove('added')
        //   })
        // }, 1000)

        // cause of hiding inner drawer container
        //$cartDrawer.children[1].classList.add('hidden')
        
        initCartDrawerQuantity()
        initCartDrawerRemoveButtons()
        initCartOpenClose()
        initCartRecommendations()
        initCartEmpty()
         //initCartUpsells()
      }
      //recommendations product display if no upsells
      const initCartRecommendations = () => {        
        const cartItems = [{{ cart_items }}]
        // let is_in_cart = false
        // let is_added = ''      
        let $cartItemId = document.querySelectorAll('.cart-item')[0]
        
        if($cartItemId != undefined) {
          const recommList = document.querySelector('.nf-cart-recommendations-list')
          //console.log("Init recommendation")
          //console.log({'cart item dataset item': $cartItemId.dataset.item})
          if(!$cartItemId) return
          if(!recommList) return
          const recommendedProducts = '/recommendations/products.json?product_id='+$cartItemId.dataset.item+'&limit=3'
          let upsell_tag_text = '{{ settings.cart_upsell_tag }}'
          let recommListItem = ''
          fetch(recommendedProducts)
          .then(res => res.json())
          .then(data => {
              //console.log(data)
            let recomm_upsells_list = new Array()
            for(let i in data.products) {
              //console.log('Recomm items:'+data.products[i].id)
              // if(is_in_cart) is_added = 'added'
              // console.log(is_added)

              let variant_available_only = []
              for(let variant_available in data.products[i].variants) {
                if( data.products[i].variants[variant_available].available == true ) {
                  variant_available_only.push(data.products[i].variants[variant_available])
                }
              }
              
              recommListItem += '<li class="nf-cart-drawer-upsell-list-item">'            
              recommListItem += '<a href="'+ data.products[i].url +'" class="cart_upsell_image_wrapper"><img src="'+data.products[i].featured_image+'" alt="'+data.products[i].title+'" width="160" height="160" style="width: 130px;height:130px;"></a>'
              recommListItem += '<div class="nf-cart-drawer-upsell-data">'
              recommListItem += '<a class="cart-item__name h5" href="'+ data.products[i].url +'">'+ data.products[i].title +'</a>'
              
              if( upsell_tag_text !== '' ) {
                recommListItem += '<p class="">'+ upsell_tag_text.replace('[amount]', '€' + priceFormat(data.products[i].price)) +'</p>'
              }

              if(variant_available_only.length > 1) {

                recommListItem += '<div class="">'
                recommListItem += '<div class="">'  
                recommListItem += '<select name="id" class="upsell_variant_select">'
                recommListItem += '<option  selected disabled> Select - €'+priceFormat(data.products[i].price)+'</option>'
                for(let j in data.products[i].variants) {
                  if( data.products[i].variants[j].available == true ) {
                    recommListItem += '<option  value="'+ data.products[i].variants[j].id +'">'+ data.products[i].variants[j].title + ' - €'+ priceFormat( data.products[i].variants[j].price ) +'</option>'
                  }
                }
                recommListItem += '</select>'
                recommListItem += '</div>'
              }else {
                recommListItem += '<span class="cart_upsell_button--recommendation " data-variant-id="'+variant_available_only[0].id+'">ADD - € '+priceFormat(data.products[i].price)+' </span>'
              }
              
              recommListItem += '</div>'
              recommListItem += '</div>'
              recommListItem += '</li>'
            }
            recommList.innerHTML = recommListItem
            recommendationsUpsell()
            recommendationsUpsellSelect()
          })
        }

      }
      initCartRecommendations()
      //Open/close event cart drawer
      const initCartOpenClose = () => {  
        const $cartDrawer = document.querySelector('#CartDrawer')
        const $closeBtn = document.querySelector('#CartDrawer .drawer__close')
        const $cartIcon = document.querySelector('#cart-icon-bubble')
        const $cartOverlay =  document.querySelector("#CartDrawer-Overlay")

        if(!$cartDrawer) return
        if(!$closeBtn) return
  
        $cartIcon.addEventListener('click', async (e) => {
          e.preventDefault()
          $cartDrawer.classList.add('show')
          $cartDrawer.setAttribute('role', 'dialog')
          $cartDrawer.style.visibility = 'visible'          
  
          // setTimeout(() => {        
          //   document.querySelectorAll('.cart_upsell_checkbox').forEach((btn) => {
          //     btn.classList.remove('added')
          //     btn.closest('.nf-cart-drawer-upsell-list-item').classList.remove('added')
          //   })
          // }, 1000)

        })
        
        $closeBtn.addEventListener('click', async (e) => {
          $cartDrawer.classList.remove('show')
          $cartDrawer.removeAttribute('role')
          $cartDrawer.style.visibility = 'hidden'
        })
  
        $cartOverlay.addEventListener('click', async (e) =>{
          $cartDrawer.classList.remove('show')
          $cartOverlay.classList.remove('show')
          $cartDrawer.removeAttribute('role')
          $cartDrawer.style.visibility = 'hidden'        
        })
      }
      initCartOpenClose()
      
      //Handle quantity
      const initCartDrawerQuantity = () => {
        document.querySelectorAll('#CartDrawer quantity-input .quantity__input').forEach(($input) => {
          $input.addEventListener('change', async (e) => {
            console.log({"input value": $input.value})
            console.log({"line": $input.dataset.index})
            if(Number($input.value) != 0) {
              await fetch('/cart/change.js', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  line: $input.dataset.index,
                  quantity: Number($input.value)
                })
              })
              console.log("trigger cart quantity")
            }
            loadNfCartDrawer()
          })
        })
      }
      initCartDrawerQuantity()
      //Handle remove buttons
      const initCartDrawerRemoveButtons = () => {
        document.querySelectorAll('cart-remove-button').forEach(($btn) => {
          $btn.addEventListener('click', async (e) => {
            console.log("trigger remove button")
            console.log({'line': $btn.dataset.index})
            console.log({"variant id": $btn.dataset.variant})
            e.preventDefault();
            await fetch('/cart/change.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                //line: $btn.dataset.index,
                id: $btn.dataset.variant,
                quantity: 0
              })
            })
            loadNfCartDrawer()
          })
        })
      }
      initCartDrawerRemoveButtons()
      //Cart upsells
      // const initCartUpsells = async () => { 
      //   document.querySelectorAll('.cart_upsell_checkbox').forEach((btn) => {
      //     btn.addEventListener('click', async (e) => {
      //       e.preventDefault()
      //       btn.classList.add('added')
      //       btn.parentElement.classList.add('added')
      //       const variantId = btn.closest('.nf-cart-drawer-upsell-list-item').querySelector('select[name="id"]').value
      //       const variantQuantity = 1;
      //       const response = await fetch('/cart/add.js', {
      //         method: 'POST',
      //         headers: { 'Content-Type': 'application/json' },
      //         body: JSON.stringify({
      //           items: [{
      //             id: Number(variantId),
      //             quantity: Number(variantQuantity)
      //           }]
      //         })
      //       })
      //       const data = await response.json()
      //       loadNfCartDrawer()
      //     })
      //   })
      // }
      //initCartUpsells()
   
      //Recommendations upsell button
      const recommendationsUpsell = async () => {
        document.querySelectorAll('.cart_upsell_button--recommendation').forEach((check) => {
          check.addEventListener('click', async (e) => {
            check.classList.add('added')
            check.parentElement.classList.add('added')
            const variantId = check.getAttribute('data-variant-id')
            const variantQuantity = 1;
            const response = await fetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                items: [{
                  id: Number(variantId),
                  quantity: Number(variantQuantity)
                }]
              })
            })
            const data = await response.json()
            loadNfCartDrawer()
          })
        })
      }
      recommendationsUpsell()
      //Recommendations upsell select
      const recommendationsUpsellSelect = async () => {
        document.querySelectorAll('.upsell_variant_select').forEach((select) => {
          select.addEventListener('change', async (e) => {
            const variantId = select.value;
            const variantQuantity = 1;
            //console.log(variantId)
            const response = await fetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                items: [{
                  id: Number(variantId),
                  quantity: Number(variantQuantity)
                }]
              })
            })
            const data = await response.json()
            //console.log("cart add")
            //console.log(data)
            loadNfCartDrawer()
          });
        })
      }
      recommendationsUpsellSelect();
      //Empty cart
      const initCartEmpty = async () => {
        const $cartEmptyBtn = document.querySelector('.cart__empty--button')
        if(!$cartEmptyBtn) return
        $cartEmptyBtn.addEventListener('click', async (e) => {
          const response = await fetch('/cart/clear.js')
          const data = await response.json()
          // console.log(data)
          loadNfCartDrawer()
        })
      }
      initCartEmpty()
      
      function priceFormat(price) {
          return ( price / 100 ).toFixed(2).replace('.', ',');
      }
    })
</script>